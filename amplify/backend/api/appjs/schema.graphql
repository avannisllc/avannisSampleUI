schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Bank {
  active: Boolean!
  bank_name: String!
  formatted_bank_name: String!
  ui_display_map: String
}

type BankConnection {
  items: [Bank]
  nextToken: String
}

type Interviews {
  bank_name: String!
  external_data_id: String!
  form_data: String!
  updated_count: Int!
  updated_timestamp: String!
}

type InterviewsConnection {
  items: [Interviews]
  nextToken: String
}

type Mutation {
  createInterviews(input: CreateInterviewsInput!): Interviews
  createQuotas(input: CreateQuotasInput!): Quotas
  deleteInterviews(input: DeleteInterviewsInput!): Interviews
  deleteQuotas(input: DeleteQuotasInput!): Quotas
  updateBank(input: UpdateBankInput!): Bank
  updateInterviews(input: UpdateInterviewsInput!): Interviews
  updateQuotas(input: UpdateQuotasInput!): Quotas
}

type Query {
  getInterviews(bank_name: String!, external_data_id: String!): Interviews
  listBanks(filter: TableBankFilterInput, limit: Int, nextToken: String): BankConnection
  listInterviews(filter: TableInterviewsFilterInput, limit: Int, nextToken: String): InterviewsConnection
  listQuotas(filter: TableQuotasFilterInput, limit: Int, nextToken: String): QuotasConnection
}

type Quotas {
  Goal: Int
  Methodology: String!
  appi: String!
  qppi: String!
  available: Int!
  available_both: Int!
  bank_name: String!
  branch_name: String!
  completed: Int!
  date_group: String!
  dwh_updated_time_utc: String!
  sent: Int!
  survey_type: String!
  uuid: String!
}

type QuotasConnection {
  items: [Quotas]
  nextToken: String
}

type Subscription {
  onCreateInterviews(bank_name: String, external_data_id: String, form_data: String, updated_count: Int, updated_timestamp: String): Interviews @aws_subscribe(mutations : ["createInterviews"])
  onCreateQuotas(appi: String, bank_name: String, completed: Int, date_group: String, uuid: String): Quotas @aws_subscribe(mutations : ["createQuotas"])
  onDeleteInterviews(bank_name: String, external_data_id: String, form_data: String, updated_count: Int, updated_timestamp: String): Interviews @aws_subscribe(mutations : ["deleteInterviews"])
  onDeleteQuotas(appi: String, bank_name: String, completed: Int, date_group: String, uuid: String): Quotas @aws_subscribe(mutations : ["deleteQuotas"])
  onUpdateBank(active: Boolean, bank_name: String, formatted_bank_name: String): Bank @aws_subscribe(mutations : ["updateBank"])
  onUpdateInterviews(bank_name: String, external_data_id: String, form_data: String, updated_count: Int, updated_timestamp: String): Interviews @aws_subscribe(mutations : ["updateInterviews"])
  onUpdateQuotas(appi: String, bank_name: String, completed: Int, date_group: String, uuid: String): Quotas @aws_subscribe(mutations : ["updateQuotas"])
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateBankInput {
  active: Boolean!
  bank_name: String!
  formatted_bank_name: String!
}

input CreateInterviewsInput {
  bank_name: String!
  external_data_id: String!
  form_data: String!
  updated_count: Int!
  updated_timestamp: String!
}

input CreateQuotasInput {
  Goal: Int
  Methodology: String!
  appi: String
  qppi: String!
  available: Int!
  available_both: Int!
  bank_name: String!
  branch_name: String!
  completed: Int!
  date_group: String!
  dwh_updated_time_utc: String!
  sent: Int!
  survey_type: String!
  uuid: String!
}

input DeleteInterviewsInput {
  bank_name: String!
  external_data_id: String!
}

input DeleteQuotasInput {
  bank_name: String!
  uuid: String!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input TableBankFilterInput {
  active: TableBooleanFilterInput
  bank_name: TableStringFilterInput
  formatted_bank_name: TableStringFilterInput
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableInterviewsFilterInput {
  bank_name: TableStringFilterInput
  external_data_id: TableStringFilterInput
  form_data: TableStringFilterInput
  updated_count: TableIntFilterInput
  updated_timestamp: TableStringFilterInput
}

input TableQuotasFilterInput {
  Goal: TableStringFilterInput
  Methodology: TableStringFilterInput
  appi: TableStringFilterInput
  qppi: TableStringFilterInput
  available: TableIntFilterInput
  bank_name: TableStringFilterInput
  branch_name: TableStringFilterInput
  completed: TableIntFilterInput
  date_group: TableStringFilterInput
  dwh_updated_time_utc: TableStringFilterInput
  sent: TableIntFilterInput
  survey_type: TableStringFilterInput
  uuid: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateBankInput {
  active: Boolean
  bank_name: String!
  formatted_bank_name: String
}

input UpdateInterviewsInput {
  bank_name: String!
  external_data_id: String!
  form_data: String
  updated_count: Int
  updated_timestamp: String
}

input UpdateQuotasInput {
  Methodology: String
  appi: String
  available: Int
  available_both: Int
  bank_name: String!
  branch_name: String
  completed: Int
  date_group: String
  dwh_updated_time_utc: String
  sent: Int
  survey_type: String
  uuid: String!
}
